generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model ConfDate {
  id        Int        @id @default(autoincrement())
  date      String
  sessions Session[]
}

model Institution {
  id            Int        @id @default(autoincrement())
  //institutionId Int     @unique 
 institution  String
  authors       Author[]
}

model Location {
  id        Int        @id @default(autoincrement())
  location  String
  sessions Session[]
}

model Schedule {
 id           Int       @id @default(autoincrement())
 scheduleId Int 
sessions   Session[]
}
model Paper {
  id           Int       @id @default(autoincrement())
  title        String
  authors      Author[]
  abstract     String
  paperUrl     String
  isPresented  Boolean
  reviews      Review[]  @relation("PaperToReview")
  reviewers    Reviewer[] @relation
}

model Session {
  id           Int           @id @default(autoincrement())
  title        String
  date         ConfDate      @relation(fields: [dateId], references: [id])
  dateId       Int
  location     Location      @relation(fields: [locationId], references: [id])
  locationId   Int
  presentations Presentation[]
 schedule  Schedule @relation(fields: [scheduleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
 scheduleId Int
}

model Review {
  id              Int          @id @default(autoincrement())
  reviewerId        Int
  overallRating  Int
  contribution   Int
  weakness       String
  strength       String
  paper          Paper[]     @relation("PaperToReview")
  reviewers      Reviewer[]  @relation("ReviewerToReview")
  paperId Int
}

model Presentation {
  paperId      Int       @id
  startTime    String
  endTime      String
 session     Session  @relation(fields: [sessionId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  sessionId   Int
}

model Author {
  id              Int          @id @default(autoincrement())
  firstName       String
  lastName        String
  email           String
  affiliation     Institution  @relation(fields: [affiliationId], references: [id])
  affiliationId   Int
  isPresenter     Boolean
paper  Paper   @relation(fields: [paperId], references: [id])
paperId  Int
}

model Reviewer {
  id           Int          @id 
  firstName    String
  lastName     String
  email        String
  reviews      Review[]     @relation("ReviewerToReview")
  papers       Paper[]      @relation()
}

model User {
  id           Int          @id @default(autoincrement())
  firstName String 
  lastName String
  email String @unique
  role String
  password String
}